map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

upstream nextjs-demo-service {
  server main-service:3001;
}

upstream nextjs-dev-service {
  server main-service:3000;
}

upstream minio_s3 {
   server main-service:9000;
}

upstream minio_console {
   server main-service:9001;
}


server_tokens off;


server {

    listen       443 ssl;
    server_name  dev.file-uploader.giglabo.com;

    error_log /var/log/nginx/dev.file-uploader.giglabo.com-error.log;
    access_log /var/log/nginx/dev.file-uploader.giglabo.com-access.log;

    ssl_certificate  /cert/dev.file-uploader.giglabo.com/fullchain.cer;
    ssl_certificate_key  /cert/dev.file-uploader.giglabo.com/dev.file-uploader.giglabo.com.key;

    client_max_body_size 1024m;
     # Disable buffering
     proxy_buffering off;
     proxy_request_buffering off;

     #location / {
     #   proxy_set_header Host $http_host;
     #   proxy_set_header X-Real-IP $remote_addr;
     #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     #   proxy_set_header X-Forwarded-Proto $scheme;

     #   proxy_connect_timeout 300;
        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
     #   proxy_http_version 1.1;
     #   proxy_set_header Connection "";
     #   chunked_transfer_encoding off;

     #   proxy_pass http://minio_s3; # This uses the upstream directive definition to load balance
     #}

     location /minio/ui/ {
        rewrite ^/minio/ui/(.*) /$1 break;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-NginX-Proxy true;

        # This is necessary to pass the correct IP to be hashed
        real_ip_header X-Real-IP;

        proxy_connect_timeout 300;

        # To support websockets in MinIO versions released after January 2023
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        # Some environments may encounter CORS errors (Kubernetes + Nginx Ingress)
        # Uncomment the following line to set the Origin request to an empty string
        # proxy_set_header Origin '';

        chunked_transfer_encoding off;

        proxy_pass http://minio_console; # This uses the upstream directive definition to load balance
     }

     location = /app {
         # Redirect to /app/en/ with trailing slash
         return 301 $scheme://$host/app/en/;
     }

     # Match exactly /app/ (with trailing slash)
     location = /app/ {
         # Redirect to /app/en/ with trailing slash
         return 301 $scheme://$host/app/en/;
     }


    location /app/ {
        # rewrite ^/app$ /app/ permanent;
        proxy_pass http://nextjs-dev-service/;

        rewrite ^/app/(.*) /app/$1 break;

        proxy_set_header Host $host;
        proxy_redirect     off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Original-Url $request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Uri $request_uri;
        # debug only
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_hide_header X-Powered-By;

        add_header Content-Security-Policy "upgrade-insecure-requests" always;

        client_max_body_size       1024m;
        client_body_buffer_size    128k;

        proxy_intercept_errors on;
    }


     location = /nextjs {
         # Redirect to /app/en/ with trailing slash
         return 301 $scheme://$host/nextjs/en/;
     }

     # Match exactly /app/ (with trailing slash)
     location = /nextjs/ {
         # Redirect to /app/en/ with trailing slash
         return 301 $scheme://$host/nextjs/en/;
     }

    location /nextjs/ {
        proxy_pass http://nextjs-demo-service/;
        rewrite ^/nextjs/(.*) /nextjs/$1 break;

        proxy_set_header Host $host;
        proxy_redirect     off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Original-Url $request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Uri $request_uri;
        # debug only
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_hide_header X-Powered-By;

        add_header Content-Security-Policy "upgrade-insecure-requests" always;

        client_max_body_size       1024m;
        client_body_buffer_size    128k;

        proxy_intercept_errors on;
    }

    location /test {
      autoindex on;
      alias /www/demo-nextjs/static;
      allow all;
    }

    location /static/nextjs/public {
      autoindex on;
      alias /www/demo-nextjs/public;
      allow all;
      try_files $uri $uri/ @error404text;
    }
    location /static/nextjs/_next/static {
        autoindex on;
        alias /www/demo-nextjs/static;
        allow all;
        try_files $uri $uri/ @error404text;
    }

    location ~ "/api/errors/([0-9]+)" {
      internal;
      return 302 /api-internal/errors/$1;
    }

    location /api-internal/errors/400 {
      internal;
      try_files $uri @error400json;
    }

    location /api-internal/errors/405 {
      internal;
      try_files $uri @error405json;
    }

    location /api-internal/errors/403 {
      internal;
      try_files $uri @error403json;
    }

    location @empty200json {
        internal;
        default_type application/json;
        return 200 '{}';
    }

    location @error400json {
        internal;
        default_type application/json;
        return 400 '{}';
    }

    location @error403json {
        internal;
        default_type application/json;
        return 403 '{}';
    }

    location @error405json {
        internal;
        default_type application/json;
        return 405 '{}';
    }

    location @error404text {
        internal;
        default_type text/html;
        return 404 'Not found';
    }
}

